From 5477eea7b3b01da8554647efaa553d27d7f63123 Mon Sep 17 00:00:00 2001
From: "ajit.pandey" <ajit.pandey@incubesol.com>
Date: Wed, 18 Mar 2015 14:47:18 +0530
Subject: ASoC: RPI: Adding support for Cirrus B+ Audio Card

Change-Id: I63d95d4f401057992fd46a0480249528f1632f23
Signed-off-by: bsapthagiri <sapthagiri.baratam@incubesol.com>
Signed-off-by: ajit.pandey <ajit.pandey@incubesol.com>
---
 sound/soc/bcm/rpi-cirrus-sound-pi.c | 26 +++++++++++++++++++-------
 1 file changed, 19 insertions(+), 7 deletions(-)

diff --git a/sound/soc/bcm/rpi-cirrus-sound-pi.c b/sound/soc/bcm/rpi-cirrus-sound-pi.c
index aac13a6..cd8f00e 100644
--- a/sound/soc/bcm/rpi-cirrus-sound-pi.c
+++ b/sound/soc/bcm/rpi-cirrus-sound-pi.c
@@ -22,13 +22,16 @@
 #include "../codecs/wm5102.h"
 #include "../codecs/wm8804.h"
 
+#include <asm/system_info.h>
+
 #define WM8804_CLKOUT_HZ 12000000
 
 /*TODO: Shift this to platform data*/
 #define GPIO_WM8804_RST 8
 #define GPIO_WM8804_MODE 2
 #define GPIO_WM8804_SW_MODE 23
-#define GPIO_WM8804_I2C_ADDR 18
+#define GPIO_WM8804_I2C_ADDR_B 18
+#define GPIO_WM8804_I2C_ADDR_B_PLUS 13
 #define RPI_WLF_SR 44100
 #define WM5102_MAX_SYSCLK_1 49152000 /*max sysclk for 4K family*/
 #define WM5102_MAX_SYSCLK_2 45158400 /*max sysclk for 11.025K family*/
@@ -100,6 +103,7 @@ static const struct snd_kcontrol_new rpi_wsp_controls[] = {
 	SOC_DAPM_PIN_SWITCH("Headset Mic"),
 	SOC_DAPM_PIN_SWITCH("SPDIF Out"),
 	SOC_DAPM_PIN_SWITCH("SPDIF In"),
+	SOC_DAPM_PIN_SWITCH("Line Input"),
 };
 
 const struct snd_soc_dapm_widget rpi_wsp_dapm_widgets[] = {
@@ -123,7 +127,7 @@ const struct snd_soc_dapm_route rpi_wsp_dapm_routes[] = {
 
 	{ "IN3L", NULL, "Line Input" },
 	{ "IN3R", NULL, "Line Input" },
-	{ "Line Input", NULL, "MICVDD" },
+	{ "Line Input", NULL, "MICBIAS3" },
 
 	/* Dummy routes to check whether SPDIF RX is enabled or not */
 	{"dummy SPDIFRX", NULL, "dummy SPDIF in"},
@@ -207,6 +211,14 @@ static void bcm2708_set_gpio_alt(int pin, int alt)
 static int wm8804_reset(void)
  {
 	int ret;
+	unsigned int gpio_wm8804_i2c_addr;
+
+	if ((system_rev & 0xffffff) >= 0x10) {
+		/* Model B+ or later */
+		gpio_wm8804_i2c_addr = GPIO_WM8804_I2C_ADDR_B_PLUS;
+	} else {
+		gpio_wm8804_i2c_addr = GPIO_WM8804_I2C_ADDR_B;
+	}
 
 	if (!gpio_is_valid(GPIO_WM8804_RST)) {
 		pr_err("Skipping unavailable gpio %d (%s)\n", GPIO_WM8804_RST, "wm8804_rst");
@@ -223,8 +235,8 @@ static int wm8804_reset(void)
 		return -ENOMEM;
 	}
 
-	if (!gpio_is_valid(GPIO_WM8804_I2C_ADDR)) {
-		pr_err("Skipping unavailable gpio %d (%s)\n", GPIO_WM8804_I2C_ADDR, "wm8804_i2c_addr");
+	if (!gpio_is_valid(gpio_wm8804_i2c_addr)) {
+		pr_err("Skipping unavailable gpio %d (%s)\n", gpio_wm8804_i2c_addr, "wm8804_i2c_addr");
 		return -ENOMEM;
 	}
 
@@ -246,7 +258,7 @@ static int wm8804_reset(void)
 		return ret;
 	}
 
-	ret = gpio_request(GPIO_WM8804_I2C_ADDR, "wm8804_i2c_addr");
+	ret = gpio_request(gpio_wm8804_i2c_addr, "wm8804_i2c_addr");
 	if (ret < 0) {
 		pr_err("gpio_request wm8804_i2c_addr failed\n");
 		return ret;
@@ -267,7 +279,7 @@ static int wm8804_reset(void)
 	}
 
 	/*Set 2 Wire (I2C) Addr to 0x3A, writing 1 will make the Addr as 0x3B*/
-	ret = gpio_direction_output(GPIO_WM8804_I2C_ADDR, 0);
+	ret = gpio_direction_output(gpio_wm8804_i2c_addr, 0);
 	if (ret < 0) {
 		pr_err("gpio_direction_output wm8804_i2c_addr failed\n");
 	}
@@ -288,7 +300,7 @@ static int wm8804_reset(void)
 	gpio_free(GPIO_WM8804_RST);
 	gpio_free(GPIO_WM8804_MODE);
 	gpio_free(GPIO_WM8804_SW_MODE);
-	gpio_free(GPIO_WM8804_I2C_ADDR);
+	gpio_free(gpio_wm8804_i2c_addr);
 
 	/*GPIO2 is used for SW/HW Mode Select and after Reset the same pin is used as
 	I2C data line, so after reset  it is configured as I2C data line i.e ALT0 function*/
-- 
2.9.0

